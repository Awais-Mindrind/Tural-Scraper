version: '3.8'

services:
  tiktok-scraper:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tiktok-scraper
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      # Airtable Configuration
      - AIRTABLE_PAT=${AIRTABLE_PAT}
      - AIRTABLE_BASE_ID=${AIRTABLE_BASE_ID}
      # Google Gemini API
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # Proxy Configuration (optional)
      - PROXY=${PROXY:-}
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=${LOG_FILE:-scraper_logs.log}
      # System Configuration
      - MAX_CONCURRENT_THREADS=${MAX_CONCURRENT_THREADS:-3}
      - DEFAULT_PROFILES_PER_HASHTAG=${DEFAULT_PROFILES_PER_HASHTAG:-500}
      # Chrome/Selenium Configuration
      - CHROME_HEADLESS=true
      - CHROME_NO_SANDBOX=true
      - CHROME_DISABLE_DEV_SHM_USAGE=true
      # Database Configuration (if using local database)
      - DATABASE_URL=${DATABASE_URL:-}
    volumes:
      # Application logs
      - ./logs:/app/logs
      # Downloaded files
      - ./downloads:/app/downloads
      # Chrome user data (for persistence)
      - chrome-data:/app/chrome-data
      # Application configuration
      - ./config:/app/config
    networks:
      - scraper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Optional: Redis for task queue (if you want to scale)
  redis:
    image: redis:7-alpine
    container_name: tiktok-scraper-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - scraper-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: tiktok-scraper-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - tiktok-scraper
    networks:
      - scraper-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tiktok-scraper-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - scraper-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tiktok-scraper-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - scraper-network

volumes:
  chrome-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  scraper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
